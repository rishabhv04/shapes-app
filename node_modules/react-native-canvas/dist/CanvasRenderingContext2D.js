"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var webview_binders_1 = require("./webview-binders");
var CanvasRenderingContext2D = /** @class */ (function () {
    function CanvasRenderingContext2D(canvas) {
        this.canvas = canvas;
    }
    CanvasRenderingContext2D.prototype.postMessage = function (message) {
        return this.canvas.postMessage(message);
    };
    CanvasRenderingContext2D = __decorate([
        (0, webview_binders_1.webviewTarget)("context2D"),
        (0, webview_binders_1.webviewProperties)({
            fillStyle: "#000",
            font: "10px sans-serif",
            globalAlpha: 1.0,
            globalCompositeOperation: "source-over",
            lineCap: "butt",
            lineDashOffset: 0.0,
            lineJoin: "miter",
            lineWidth: 1.0,
            miterLimit: 10.0,
            shadowBlur: 0,
            shadowColor: "rgba(0,0,0,0)",
            shadowOffsetX: 0,
            shadowOffsetY: 0,
            strokeStyle: "#000",
            textAlign: "start",
            textBaseline: "alphabetic",
        }),
        (0, webview_binders_1.webviewMethods)([
            "arc",
            "arcTo",
            "beginPath",
            "bezierCurveTo",
            "clearRect",
            "clip",
            "closePath",
            "createImageData",
            "createLinearGradient",
            "createPattern",
            "createRadialGradient",
            "drawFocusIfNeeded",
            "drawImage",
            "drawWidgetAsOnScreen",
            "drawWindow",
            "ellipse",
            "fill",
            "fillRect",
            "fillText",
            "getImageData",
            "getLineDash",
            "isPointInPath",
            "isPointInStroke",
            "lineTo",
            "measureText",
            "moveTo",
            "putImageData",
            "quadraticCurveTo",
            "rect",
            "restore",
            "rotate",
            "save",
            "scale",
            "setLineDash",
            "setTransform",
            "stroke",
            "strokeRect",
            "strokeText",
            "transform",
            "translate",
        ])
    ], CanvasRenderingContext2D);
    return CanvasRenderingContext2D;
}());
exports.default = CanvasRenderingContext2D;
