"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = "<html><head>\n    <meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scaleable=no\" name=\"viewport\">\n    <style>\n      html {\n        -ms-content-zooming: none;\n        -ms-touch-action: pan-x pan-y;\n      }\n      body {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        margin: 0;\n        padding: 0;\n        overflow: hidden;\n      }\n      * {\n        user-select: none;\n        -ms-user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n      }\n    </style>\n  </head>\n  <body>\n    <script>(function () {\n    if (CanvasRenderingContext2D.useSVGMatrix === void 0) {\n        CanvasRenderingContext2D.useSVGMatrix = false;\n    }\n    CanvasRenderingContext2D.arrayToSVGMatrix = function (matrix) {\n        if (matrix instanceof SVGMatrix) {\n            return matrix;\n        }\n        else if (matrix instanceof Array) {\n            var _matrix = document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGMatrix();\n            _matrix.a = array[0];\n            _matrix.b = array[1];\n            _matrix.c = array[2];\n            _matrix.d = array[3];\n            _matrix.e = array[4];\n            _matrix.f = array[5];\n            return _matrix;\n        }\n        else {\n            throw new Error('Matrix is not an Array');\n        }\n    };\n    CanvasRenderingContext2D.svgMatrixToArray = function (matrix) {\n        if (matrix instanceof Array) {\n            return matrix;\n        }\n        else if (matrix instanceof SVGMatrix) {\n            return [\n                matrix.a,\n                matrix.b,\n                matrix.c,\n                matrix.d,\n                matrix.e,\n                matrix.f\n            ];\n        }\n        else {\n            throw new Error('Matrix is not a SVGMatrix');\n        }\n    };\n})();\n(function () {\n    var canvasRenderingContext2DPrototype = CanvasRenderingContext2D.prototype;\n    var HTMLCanvasElementPrototype = HTMLCanvasElement.prototype;\n    if (!('resetTransform' in canvasRenderingContext2DPrototype)) {\n        canvasRenderingContext2DPrototype.resetTransform = function () {\n            this.setTransform(1, 0, 0, 1, 0, 0);\n        };\n    }\n    if (!('currentTransform' in canvasRenderingContext2DPrototype)) {\n        if ('mozCurrentTransform' in canvasRenderingContext2DPrototype) {\n            Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\n                get: function () {\n                    return this.mozCurrentTransform;\n                },\n                set: function (matrix) {\n                    this.mozCurrentTransform = matrix;\n                },\n                enumerable: true,\n                configurable: true\n            });\n        }\n        else {\n            var getContext = HTMLCanvasElementPrototype.getContext;\n            HTMLCanvasElementPrototype.getContext = function (contextType, contextAttributes) {\n                var context = getContext.call(this, contextType, contextAttributes);\n                switch (contextType) {\n                    case '2d':\n                        Object.defineProperties(context, {\n                            '_transformStack': { value: [], configurable: true, writable: true },\n                            '_transformMatrix': { value: [1, 0, 0, 1, 0, 0], configurable: true, writable: true }\n                        });\n                        break;\n                }\n                return context;\n            };\n            Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\n                get: function () {\n                    return this._transformMatrix;\n                },\n                set: function (matrix) {\n                    this._transformMatrix = matrix;\n                    this.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            var translate = canvasRenderingContext2DPrototype.translate;\n            canvasRenderingContext2DPrototype.translate = function (x, y) {\n                var matrix = this._transformMatrix;\n                matrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\n                matrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\n                translate.call(this, x, y);\n            };\n            var scale = canvasRenderingContext2DPrototype.scale;\n            canvasRenderingContext2DPrototype.scale = function (x, y) {\n                var matrix = this._transformMatrix;\n                matrix[0] *= x;\n                matrix[1] *= x;\n                matrix[2] *= y;\n                matrix[3] *= y;\n                scale.call(this, x, y);\n            };\n            var rotate = canvasRenderingContext2DPrototype.rotate;\n            canvasRenderingContext2DPrototype.rotate = function (angle) {\n                var cosValue = Math.cos(angle);\n                var sinValue = Math.sin(angle);\n                var matrix = this._transformMatrix;\n                this._transformMatrix = [\n                    matrix[0] * cosValue + matrix[2] * sinValue,\n                    matrix[1] * cosValue + matrix[3] * sinValue,\n                    matrix[0] * (-sinValue) + matrix[2] * cosValue,\n                    matrix[1] * (-sinValue) + matrix[3] * cosValue,\n                    matrix[4],\n                    matrix[5]\n                ];\n                rotate.call(this, angle);\n            };\n            var transform = canvasRenderingContext2DPrototype.transform;\n            canvasRenderingContext2DPrototype.transform = function (a, b, c, d, e, f) {\n                var matrix = this._transformMatrix;\n                this._transformMatrix = [\n                    matrix[0] * a + matrix[2] * b,\n                    matrix[1] * a + matrix[3] * b,\n                    matrix[0] * c + matrix[2] * d,\n                    matrix[1] * c + matrix[3] * d,\n                    matrix[0] * e + matrix[2] * f + matrix[4],\n                    matrix[1] * e + matrix[3] * f + matrix[5]\n                ];\n                transform.call(this, a, b, c, d, e, f);\n            };\n            var setTransform = canvasRenderingContext2DPrototype.setTransform;\n            canvasRenderingContext2DPrototype.setTransform = function (a, b, c, d, e, f) {\n                this._transformMatrix = [a, b, c, d, e, f];\n                setTransform.call(this, a, b, c, d, e, f);\n            };\n            var resetTransform = canvasRenderingContext2DPrototype.resetTransform;\n            canvasRenderingContext2DPrototype.resetTransform = function () {\n                this._transformMatrix = [1, 0, 0, 1, 0, 0];\n                resetTransform.call(this);\n            };\n            var save = canvasRenderingContext2DPrototype.save;\n            canvasRenderingContext2DPrototype.save = function () {\n                this._transformStack.push(this._transformMatrix);\n                this._transformMatrix = this._transformMatrix.slice(0, 6);\n                save.call(this);\n            };\n            var restore = canvasRenderingContext2DPrototype.restore;\n            canvasRenderingContext2DPrototype.restore = function () {\n                var matrix = this._transformStack.pop();\n                if (matrix) {\n                    this._transformMatrix = matrix;\n                }\n                restore.call(this);\n            };\n        }\n    }\n    var currentTransform = Object.getOwnPropertyDescriptor(CanvasRenderingContext2D.prototype, 'currentTransform');\n    var currentTransformIsSVGMatrix = (document.createElement('canvas').getContext('2d').currentTransform instanceof SVGMatrix);\n    Object.defineProperty(canvasRenderingContext2DPrototype, 'currentTransform', {\n        get: function () {\n            var value = currentTransform.get.call(this);\n            return CanvasRenderingContext2D.useSVGMatrix ?\n                CanvasRenderingContext2D.arrayToSVGMatrix(value) : CanvasRenderingContext2D.svgMatrixToArray(value);\n        },\n        set: function (matrix) {\n            currentTransform.set.call(this, currentTransformIsSVGMatrix ?\n                CanvasRenderingContext2D.svgMatrixToArray(matrix) : CanvasRenderingContext2D.svgMatrixToArray(matrix));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    if (!('imageSmoothingEnabled' in canvasRenderingContext2DPrototype)) {\n        Object.defineProperty(canvasRenderingContext2DPrototype, 'imageSmoothingEnabled', {\n            get: function () {\n                if (this.mozImageSmoothingEnabled !== void 0) {\n                    return this.mozImageSmoothingEnabled;\n                }\n                else if (this.webkitImageSmoothingEnabled !== void 0) {\n                    return this.webkitImageSmoothingEnabled;\n                }\n                else if (this.msImageSmoothingEnabled !== void 0) {\n                    return this.msImageSmoothingEnabled;\n                }\n                else {\n                    return true;\n                }\n            },\n            set: function (enable) {\n                if (this.mozImageSmoothingEnabled !== void 0) {\n                    this.mozImageSmoothingEnabled = enable;\n                }\n                else if (this.webkitImageSmoothingEnabled !== void 0) {\n                    this.webkitImageSmoothingEnabled = enable;\n                }\n                else if (this.msImageSmoothingEnabled !== void 0) {\n                    this.msImageSmoothingEnabled = enable;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n    }\n    if (!('ellipse' in canvasRenderingContext2DPrototype)) {\n        canvasRenderingContext2DPrototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {\n            this.save();\n            this.translate(x, y);\n            this.rotate(rotation);\n            this.scale(radiusX, radiusY);\n            this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\n            this.restore();\n        };\n    }\n})();\n(function () {\n    if (!('Path2D' in window) || !('addPath' in window.Path2D.prototype)) {\n        var _Path2D = window.Path2D;\n        var Path2D = function (path2D) {\n            Object.defineProperty(this, '_operations', {\n                value: [],\n                configurable: true,\n                writable: true\n            });\n            if (path2D instanceof Path2D) {\n                if (path2D._original && _Path2D) {\n                    Object.defineProperty(this, '_original', {\n                        value: new _Path2D(path2D._original),\n                        configurable: true,\n                        writable: true\n                    });\n                    this._operations = path2D._operations.slice(0);\n                }\n                else {\n                    this.addPath(path2D);\n                }\n            }\n            else if (_Path2D) {\n                Object.defineProperty(this, '_original', {\n                    value: new _Path2D(path2D),\n                    configurable: true,\n                    writable: true\n                });\n            }\n        };\n        window.Path2D = Path2D;\n        var path2DPrototype = Path2D.prototype;\n        ['arc', 'arcTo', 'bezierCurveTo', 'closePath', 'ellipse', 'lineTo', 'moveTo', 'quadraticCurveTo', 'rect']\n            .forEach(function (attributeName) {\n            path2DPrototype[attributeName] = function () {\n                this._operations.push({ type: attributeName, arguments: Array.prototype.slice.call(arguments, 0) });\n                if (this._original)\n                    _Path2D.prototype[attributeName].apply(this._original, arguments);\n            };\n        });\n        var canvasRenderingContext2DPrototype = CanvasRenderingContext2D.prototype;\n        ['fill', 'stroke', 'clip', 'isPointInPath', 'isPointInStroke']\n            .forEach(function (attributeName) {\n            var original = canvasRenderingContext2DPrototype[attributeName];\n            canvasRenderingContext2DPrototype[attributeName] = function (path2D) {\n                if (path2D instanceof Path2D) {\n                    if (path2D._original) {\n                        return original.apply(this, [path2D._original].concat(Array.prototype.slice.call(arguments, 1)));\n                    }\n                    else {\n                        this.beginPath();\n                        var operation;\n                        for (var i = 0, l = path2D._operations.length; i < l; i++) {\n                            operation = path2D._operations[i];\n                            canvasRenderingContext2DPrototype[operation.type].apply(this, operation.arguments);\n                        }\n                        return original.apply(this, Array.prototype.slice.call(arguments, 1));\n                    }\n                }\n                else {\n                    return original.apply(this, arguments);\n                }\n            };\n        });\n        if (!('addPath' in path2DPrototype)) {\n            path2DPrototype.addPath = function (path2D, transform) {\n                if (transform !== void 0) {\n                    if (path2D._original)\n                        delete path2D._original;\n                    this._operations.push({ type: 'save', arguments: [] });\n                    this._operations.push({\n                        type: 'transform',\n                        arguments: CanvasRenderingContext2D.svgMatrixToArray(transform)\n                    });\n                }\n                var operation;\n                for (var i = 0, l = path2D._operations.length; i < l; i++) {\n                    operation = path2D._operations[i];\n                    path2DPrototype[operation.type].apply(this, operation.arguments);\n                }\n                if (transform !== void 0) {\n                    this._operations.push({ type: 'restore', arguments: [] });\n                }\n            };\n        }\n    }\n})();\n</script>\n    <script>var scale = function (ratio) {\n    return function (item) {\n        if (typeof item === \"number\") {\n            return item * ratio;\n        }\n        return item;\n    };\n};\nfunction autoScaleCanvas(canvas) {\n    var ctx = canvas.getContext(\"2d\");\n    var ratio = window.devicePixelRatio || 1;\n    if (ratio !== 1) {\n        canvas.style.width = canvas.width + \"px\";\n        canvas.style.height = canvas.height + \"px\";\n        canvas.width *= ratio;\n        canvas.height *= ratio;\n        ctx.scale(ratio, ratio);\n        ctx.isPointInPath = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return CanvasRenderingContext2D.prototype.isPointInPath.apply(ctx, args.map(scale(ratio)));\n        };\n    }\n    return canvas;\n}\nwindow.autoScaleCanvas = autoScaleCanvas;\n</script>\n    <script>var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar WEBVIEW_TARGET = \"@@WEBVIEW_TARGET\";\nvar ID = function () { return Math.random().toString(32).slice(2); };\nvar flattenObjectCopyValue = function (flatObj, srcObj, key) {\n    var value = srcObj[key];\n    if (typeof value === \"function\") {\n        return;\n    }\n    if (typeof value === \"object\" && value instanceof Node) {\n        return;\n    }\n    flatObj[key] = flattenObject(value);\n};\nvar flattenObject = function (object) {\n    if (typeof object !== \"object\" || object === null) {\n        return object;\n    }\n    var flatObject = {};\n    for (var key in object) {\n        flattenObjectCopyValue(flatObject, object, key);\n    }\n    for (var key in Object.getOwnPropertyNames(object)) {\n        flattenObjectCopyValue(flatObject, object, key);\n    }\n    return flatObject;\n};\nvar AutoScaledCanvas = (function () {\n    function AutoScaledCanvas(element) {\n        this.element = element;\n    }\n    AutoScaledCanvas.prototype.toDataURL = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return (_a = this.element).toDataURL.apply(_a, args);\n    };\n    AutoScaledCanvas.prototype.autoScale = function () {\n        if (this.savedHeight !== undefined) {\n            this.element.height = this.savedHeight;\n        }\n        if (this.savedWidth !== undefined) {\n            this.element.width = this.savedWidth;\n        }\n        window.autoScaleCanvas(this.element);\n    };\n    Object.defineProperty(AutoScaledCanvas.prototype, \"width\", {\n        get: function () {\n            return this.element.width;\n        },\n        set: function (value) {\n            this.savedWidth = value;\n            this.autoScale();\n            return value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AutoScaledCanvas.prototype, \"height\", {\n        get: function () {\n            return this.element.height;\n        },\n        set: function (value) {\n            this.savedHeight = value;\n            this.autoScale();\n            return value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return AutoScaledCanvas;\n}());\nvar toMessage = function (result) {\n    if (result instanceof Blob) {\n        return {\n            type: \"blob\",\n            payload: btoa(result),\n            meta: {},\n        };\n    }\n    if (result instanceof Object) {\n        if (!result[WEBVIEW_TARGET]) {\n            var id = ID();\n            result[WEBVIEW_TARGET] = id;\n            targets[id] = result;\n        }\n        return {\n            type: \"json\",\n            payload: flattenObject(result),\n            args: toArgs(flattenObject(result)),\n            meta: {\n                target: result[WEBVIEW_TARGET],\n                constructor: result.__constructorName__ || result.constructor.name,\n            },\n        };\n    }\n    return {\n        type: \"json\",\n        payload: JSON.stringify(result),\n        meta: {},\n    };\n};\nvar toArgs = function (result) {\n    var args = [];\n    for (var key in result) {\n        if (result[key] !== undefined && key !== \"@@WEBVIEW_TARGET\") {\n            if (typedArrays[result[key].constructor.name] !== undefined) {\n                result[key] = Array.from(result[key]);\n            }\n            args.push(result[key]);\n        }\n    }\n    return args;\n};\nvar createObjectsFromArgs = function (args) {\n    var _a;\n    for (var index = 0; index < args.length; index += 1) {\n        var currentArg = args[index];\n        if (currentArg && currentArg.className !== undefined) {\n            var className = currentArg.className, classArgs = currentArg.classArgs;\n            var object = new ((_a = constructors[className]).bind.apply(_a, __spreadArray([void 0], classArgs, false)))();\n            args[index] = object;\n        }\n    }\n    return args;\n};\nvar canvas = document.createElement(\"canvas\");\nvar autoScaledCanvas = new AutoScaledCanvas(canvas);\nvar targets = {\n    canvas: autoScaledCanvas,\n    context2D: canvas.getContext(\"2d\"),\n};\nvar constructors = {\n    Image: Image,\n    Path2D: Path2D,\n    CanvasGradient: CanvasGradient,\n    ImageData: ImageData,\n    Uint8ClampedArray: Uint8ClampedArray,\n};\nvar typedArrays = {\n    Uint8ClampedArray: Uint8ClampedArray,\n};\nImage.bind =\n    Image.bind ||\n        function () {\n            return Image;\n        };\nPath2D.bind =\n    Path2D.bind ||\n        function () {\n            return Path2D;\n        };\nImageData.bind =\n    ImageData.bind ||\n        function () {\n            return ImageData;\n        };\nUint8ClampedArray.bind =\n    Uint8ClampedArray.bind ||\n        function () {\n            return Uint8ClampedArray;\n        };\nvar populateRefs = function (arg) {\n    if (arg && arg.__ref__) {\n        return targets[arg.__ref__];\n    }\n    return arg;\n};\ndocument.body.appendChild(canvas);\nfunction handleMessage(_a) {\n    var _b, _c;\n    var id = _a.id, type = _a.type, payload = _a.payload;\n    switch (type) {\n        case \"exec\": {\n            var target = payload.target, method = payload.method, args = payload.args;\n            var result = (_b = targets[target])[method].apply(_b, args.map(populateRefs));\n            var message = toMessage(result);\n            if (typeof result === \"object\" && !message.meta.constructor) {\n                for (var constructorName in constructors) {\n                    if (result instanceof constructors[constructorName]) {\n                        message.meta.constructor = constructorName;\n                    }\n                }\n            }\n            window.ReactNativeWebView.postMessage(JSON.stringify(__assign({ id: id }, message)));\n            break;\n        }\n        case \"set\": {\n            var target = payload.target, key = payload.key, value = payload.value;\n            targets[target][key] = populateRefs(value);\n            break;\n        }\n        case \"construct\": {\n            var constructor = payload.constructor, target = payload.id, _d = payload.args, args = _d === void 0 ? [] : _d;\n            var newArgs = createObjectsFromArgs(args);\n            var object = void 0;\n            try {\n                object = new ((_c = constructors[constructor]).bind.apply(_c, __spreadArray([void 0], newArgs, false)))();\n            }\n            catch (error) {\n                throw new Error(\"Error while constructing \".concat(constructor, \" \").concat(error.message));\n            }\n            object.__constructorName__ = constructor;\n            var message = toMessage({});\n            targets[target] = object;\n            window.ReactNativeWebView.postMessage(JSON.stringify(__assign({ id: id }, message)));\n            break;\n        }\n        case \"listen\": {\n            var types = payload.types, target_1 = payload.target;\n            for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {\n                var eventType = types_1[_i];\n                targets[target_1].addEventListener(eventType, function (e) {\n                    var _a;\n                    var message = toMessage({\n                        type: \"event\",\n                        payload: {\n                            type: e.type,\n                            target: __assign(__assign({}, flattenObject(targets[target_1])), (_a = {}, _a[WEBVIEW_TARGET] = target_1, _a)),\n                        },\n                    });\n                    window.ReactNativeWebView.postMessage(JSON.stringify(__assign({ id: id }, message)));\n                });\n            }\n            break;\n        }\n    }\n}\nvar handleError = function (err, message) {\n    window.ReactNativeWebView.postMessage(JSON.stringify({\n        id: message.id,\n        type: \"error\",\n        payload: {\n            message: err.message,\n            stack: err.stack,\n        },\n    }));\n    document.removeEventListener(\"message\", handleIncomingMessage);\n};\nfunction handleIncomingMessage(e) {\n    var data = JSON.parse(e.data);\n    if (Array.isArray(data)) {\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var message = data_1[_i];\n            try {\n                handleMessage(message);\n            }\n            catch (err) {\n                handleError(err, message);\n            }\n        }\n    }\n    else {\n        try {\n            handleMessage(data);\n        }\n        catch (err) {\n            handleError(err, data);\n        }\n    }\n}\nwindow.addEventListener(\"message\", handleIncomingMessage);\ndocument.addEventListener(\"message\", handleIncomingMessage);\n</script>\n  \n\n</body></html>";
